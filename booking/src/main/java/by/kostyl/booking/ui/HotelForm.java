package by.kostyl.booking.ui;

import java.time.LocalDate;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.annotations.DesignRoot;
import com.vaadin.data.Binder;
import com.vaadin.data.converter.StringToIntegerConverter;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.DateField;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.NativeSelect;
import com.vaadin.ui.Notification;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.declarative.Design;

import by.kostyl.booking.converters.OperatesFromConverter;
import by.kostyl.booking.entity.Hotel;
import by.kostyl.booking.entity.HotelCategory;
import by.kostyl.booking.service.HotelService;

/**
 * !! DO NOT EDIT THIS FILE !!
 * 
 * This class is generated by Vaadin Designer and will be overwritten.
 * 
 * Please make a subclass with logic and additional interfaces as needed, e.g
 * class LoginView extends LoginDesign implements View { }
 */

public class HotelForm extends FormLayout {
	private HotelView ui;
	private Hotel hotel;
	private HotelService hotelService = HotelService.getInstance();
	private TextField name = new TextField("name");
	private TextArea description = new TextArea("description");
	private TextField address = new TextField("adress");

	private TextField rating = new TextField("rating");
	private TextField url = new TextField("link to booking");

	private DateField operatesFrom = new DateField("from");

	private NativeSelect<HotelCategory> category = new NativeSelect<>("category");

	private Button saveBtn = new Button("Save");
	private Button deleteBtn = new Button("Delete");
	private Binder<Hotel> hotelBinder = new Binder(Hotel.class);

	public HotelForm(HotelView ui) {
		this.ui = ui;
		setSizeUndefined();
		HorizontalLayout buttons = new HorizontalLayout(saveBtn, deleteBtn);
		addComponents(name, address, rating, url, operatesFrom, category, description, buttons);
		category.setItems(HotelCategory.values());
		deleteBtn.addClickListener(e -> deleteHotel());
		saveBtn.addClickListener(e -> saveHotel());
		bindForm();
	}

	public Hotel getHotel() {
		return hotel;
	}
	//binding form
	public void bindForm() {
		//converters and validators,also required = true for all fields unless description field
		hotelBinder.forField(rating).asRequired("This is required field").withConverter(new StringToIntegerConverter(0, "only digits"))
				.withValidator(val -> val < 6 && val > 0, "Rating should be positive number less then 6")
				.bind(Hotel::getRating, Hotel::setRating);
		
		hotelBinder.forField(name)
		.asRequired("This is required field")
		.bind(Hotel::getName, Hotel::setName);
		
		hotelBinder.forField(address)
		.asRequired("This is required field")
		.bind(Hotel::getAddress, Hotel::setAddress);
		
		hotelBinder.forField(description).bind(Hotel::getDescription, Hotel::setDescription);
		
		hotelBinder.forField(url).asRequired("This is required field").bind(Hotel::getUrl, Hotel::setUrl);
		
		hotelBinder.forField(operatesFrom).asRequired("This is required field").withConverter(new OperatesFromConverter())
		.withValidator(val ->  val > 0, "Were u operating for negative days??")
		.bind(Hotel::getOperatesFrom,
				Hotel::setOperatesFrom);
		//hotelBinder.forField(category).asRequired("select category!");
		//tooltips for fields
		rating.setDescription("Enter rating from 1 to 5");
		name.setDescription("Enter name of ur hotel");
		address.setDescription("Enter address of ur hotel");
		description.setDescription("Enter description for ur hotel");
		url.setDescription("Enter link with ur hotel on booking");
		operatesFrom.setDescription("Since what year ur hotel worked");
		category.setDescription("Select ur hotel category");
	}

	public void setHotel(Hotel hotel) {
		this.hotel = hotel;
		System.out.println(hotel);
		hotelBinder.setBean(hotel);
		deleteBtn.setVisible(hotel.isPersisted());
		setVisible(true);
		name.selectAll();
	}

	public void deleteHotel() {
		hotelService.delete(hotel);
		this.ui.updateHotels("");
		setVisible(false);

	}

	public void saveHotel() {
		if(hotelBinder.isValid()){
			hotelService.save(hotel);
			this.ui.updateHotels("");
			setVisible(false);
		}else
		Notification.show("Please take a look to fields tooltips and fill all fields correctly!!");

	}

	

}
